"""
============================
Author: 潘师傅
Time: 2022/7/29 17:44
Project: wxzy
Company: 无限主义
============================
"""
"""
移动互联网App测试点包括：
1.权限测试
    1)软件权限
        -扣费风险：包括发送短信、拨打电话、连接网络等
        -隐私泄露风险：包括访问手机信息、访问联系人信息等 -新增风险项
    2)开发者官方权限列表信息比对分析

2.安装、运行、卸载测试验证App是否能正确安装、运行、卸载，以及操作过程和操作前后对系统资源的使用情况，主要包括：
    1)检测软件是否能正确安装、运行、卸载；
    2)安装、卸载、更新错误报告；
    3)其他辅助信息：
        -位置和文件夹是否合理；
        -组件是否正确注册或删除；
        -评估操作前后，CPU、Memory（内存占用）、Storage（磁盘占用）等系统资源的使用情况。

3.UI测试
    测试用户界面(如菜单、对话框、窗口和其它可视控件)布局、风格是否满足客户要求，文字是否正确，页面是否美观，文字，图片组合是否完美，操作是否友好等。
    UI测试的目标是确保用户界面会通过测试对象的功能来为用户提供相应的访问或浏览功能。确保用户界面符合公司或行业的标准。包括用户友好性、人性化、易操作性测试。

4.功能测试   根据软件说明或用户需求验证App的各个功能实现，采用如下方法实现并评估功能测试过程：
    1)采用时间、地点、对象、行为和背景五元素或业务分析等方法分析、提炼App的用户使用场景，对比说明或需求，整理出内在、外在及非功能直接相关的需求，
    构建测试点，并明确测试标准（若用户需求中无明确标准遵循，则需要参考行业或相关国际标准或规则）。
    2)根据被测功能点的特性列举出相应类型的测试用例对其进行覆盖，如：涉及输入的地方需要考虑等价、边界、负面、异常或非法、场景回滚、关联测试等测试类型对其进行覆盖。
    3)在测试实现的各个阶段跟踪测试实现与需求输入的覆盖情况，及时修正业务或需求理解错误。

5.性能测试   评估App的时间和空间特性
    1)极限测试：在各种边界压力情况下（如电池、存储、网速等），验证App是否能正确响应。
    2)响应能力测试：测试App中的各类操作是否满足用户响应时间要求
    3)压力测试：反复/长期操作下，系统资源是否占用异常；
    4)性能评估：评估典型用户应用场景下，系统资源的使用情况。
    5)Benchmark测试（基线测试）：与竞争产品的Benchmarking, 产品演变对比测试等。

6.中断测试
    针对智能终端应用的服务等级划分方式及实时特性所提出的测试方法，
    如：App在前/后台运行状态时与来电、文件下载、音乐收听等关键运用的交互情况测试等。

7.兼容测试   主要测试内部和外部兼容性，
    包括： 与本地及主流App是否兼容；
    检验在各种网络连接下(WiFi、GSM、GPRS、EDGE、WCDMA、CDMA1x、CDMA2000、HSPDA等)，App的数据和运用是否正确；
    与各种设备是否兼容（若有跨系统支持则需要检验是否在各系统下，各种行为是否一致）。

8.安全测试
    1. 用户隐私
        检查是否在本地保存用户密码，无论加密与否
        检查敏感的隐私信息，如聊天记录、关系链、银行账号等是否进行加密
        检查是否将系统文件、配置文件明文保存在外部设备上
        部分需要存储到外部设备的信息，需要每次使用前都判断信息是否被篡改
    2. 文件权限
        检查App所在的目录，其权限必须为不允许其他组成员读写
    3. 网络通讯
        检查敏感信息在网络传输中是否做了加密处理，重要数据要采用TLS或者SSL
    4. 运行时解释保护
        对于嵌有解释器的软件，检查是否存在XSS、SQL注入漏洞
        使用webiew的App，检查是否存在URL欺骗漏洞
    5. Android组件权限保护
        禁止App内部组件被任意第三方程序调用。
        若需要供外部调用的组件，应检查对调用者是否做了签名限制
    6. 升级
        检查是否对升级包的完整性、合法性进行了校验，避免升级包被劫持
    7. 3rd库
        如果使用了第三方库，需要跟进第三方库的更新

9.回归测试    Bug修复后的回归测试，在交付前、要进行全量用例的回归测试。

10.升级、更新测试   新版版发布后，配合不同网络环境的自动更新提示，及下载、安装、更新、启动、运行的验证测试。

11. 用户体验测试
以主观的普通消费者的角度去感知产品或服务的舒适、有用、易用、友好亲切程度。
通过不同个体、独立空间和非经验的统计复用方式去有效评价产品的体验特性，提出修改意见提升产品的潜在客户满意度。

移动App测试与传统台式机测试相比有一定的复杂性。这些复杂性可以被分类为：
    环境（大量的设备，各种移动OSs，适应频繁OSs变化）
    设备（触摸式和非触摸式设备，有限的内存容量，电池耗电量）
    网络（不同的网络和运营商，在不好或无网络的情况下的App行为，离线支持）
    可用性（方向，触摸，多触摸，缩放，分页和导航的局限性，各种干扰，如来电，来电短信，闹钟，和低电量警报）


移动App崩溃原因
    设备碎片化：由于设备极具多样性，App在不同的设备上可能有表现不同。
    带宽限制：带宽不佳的网络对App所需的快速响应时间可能不够。
    网络的变化：不同网络间的切换可能会影响App的稳定性。
    内存管理：可用内存过低，或非授权的内存位置的使用可能会导致App失败。
    用户过多：连接数量过多可能会导致App崩溃。
    代码错误：没有经过测试的新功能，可能会导致App在生产环境中失败。
    第三方服务：广告或弹出屏幕可能会导致App崩溃。

移动App崩溃的测试用例设计
    验证在有不同的屏幕分辨率，操作系统和运营商的多个设备上的App行为。
    用新发布的操作系统版本验证App的行为。
    验证在如隧道，电梯等网络质量突然改变的环境中的App行为。
    通过手动网络从蜂窝更改到Wi-Fi ，或反过来，验证App行为。
    验证在没有网络的环境中的App行为。
    验证来电/短信和设备特定的警报（如警报和通知）时的App行为。
    通过改变设备的方向，以不同的视图模式，验证App行为。
    验证设备内存不足时的App行为。
    通过用测试工具施加载荷验证App行为。
    用不同的支持语言验证App行为。


1.上线第一个版本时，首先要做好系统更新的功能【自动提示更新、在版本更新出手工更新】：
上线第一个版本时，还是会存在一些未发现的bug和一些需要完善的功能，所以版本更新必须做好；

2.ios版开发时，必须要告知app开发人员再布局时要考虑适配所有机型的工作；【这个问题主要看app开发人员的能力问题，
我们公司的ios开发在做项目的时候没有使用最先进的sizeclass，导致不能做适配所有机型的工作】

3.更新版本时，测试这边一定要做好版本控制；（不然后出现测试版本可以，但线上更新版本出现问题）

4.更新到线上后，还应该要测试一下线上版本；【我们公司ios版测试时，支付是ok的，但发到线上去后，发现支付那一块出现了问题：
调支付宝SDK传入的异步通知Url是我们App异步确认订单的Url，但线上版本支付宝异步调用的是我们网页版支付的，导致订单已支付但订单状态为变更】

5.接口更改时（哪怕是优化部分）也应该告知测试，不然更改部分测试不知道，没做回归测试；【最好测试这边做一个接口更新记录，
这样若接口更改未通知测试，导致未测试到bug，测试这边就不会老是承受各方面压力】

6.确认订单时不要考虑掉了库存问题；

7.测试列表时，最前面和最后面一列是一定要点击的，因为代码中可能出现下标越界问题，可能会导致点击第一条记录，但详情中显示的是第二条的信息；

8.app要调用其他第三方软件时，测试时不要遗漏 未安装第三方软件的情况。（example：支付时要调用微信，
但手机上未装微信，没有测试这种情况，ios提交平台后就背打出来了）；

9.一定要测试低版本系统的手机。（example：由于测试时没有那么多的ios手机，所以测试时只测了系统版本在ios8以上的手机；
但发到线上有用户反馈购物车页面无结算按钮，后来查找原因发现是：购物车确认按钮 那一排
是毛玻璃效果的背景（多个物品在购物车你上下滑动就看到确认按钮那一排是半透明的），在低版本系统上表现不出来导致看不到结算确认那一排；
这个问题主要是没有过低版本手机测试导致，所以低版本手机测试时有必要的。


ios适配所有机型UI部分作图：
    标准4:3一套；
    iPhone5的16:9一套；
    iphone6的16:9一套；
    6plus的16:9一套；
    非Retina分辨率一套（是3Gs及一下型，可不兼容）



web测试与手机app测试的异同
    1、相同点
    不管是传统行业的web测试，还是新兴的手机app测试，都离不开测试的基础知识，即是不管怎么变，测试的原理依然会融入在这两者当中。
        1）设计测试用例时，依然都是依据边界值分析法、等价类划分等；
        2）多数采用黑盒的测试方法，来验证业务功能是否得到正确的应用；
        3）需要检查界面的布局、风格和按钮等是否简洁美观、是否统一等；
        4）测试页面载入和翻页的速度、登录时长、内存是否溢出等；
        5）测试应用系统的稳定性等。
    2、不同点
    相对于web测试，手机软件测试，除了要考虑基本的功能测试、性能等，还要考虑手机本身固有的属性特征。
    所以对比web测试和手机测试，手机测试过程中还需要注意如下几个方面特性：
        1）手机作为通信工具，来电、去电、接收短信等操作都会对app应用程序产生影响，所以app测试第一个要考虑的属性特征是：中断测试。
        中断测试有人为中断、新任务中断以及意外中断等几种情况，主要从以下几个方面进行验证：
            a.来电中断：呼叫挂断、被呼叫挂断、通话挂断、通话被挂断
            b.短信中断：接收短信、查看短信
            c.其他中断：蓝牙、闹钟、插拔数据线、手机锁定、手机断电、手机问题（系统死机、重启）
        2）手机用户对app产品的安装卸载操作：从上一个版本/上两个版本直接升级到最新版本。
            全新安装新版本
            新版本覆盖旧版本安装
            卸载旧版本，安装新版本
            卸载新版本，安装新版本
        3）web自动化测试使用的工具较常用的是QTP，而android手机自动化测试工具比较常用的是monkey、monkeyrunner。
            app自动化测试工具 monkey monkeyrunner
            性能测试工具 腾讯GT
            appium 自动化测试工具
            app兼容性测试 云测试平台
            app接口测试 loadrunner 11 协议http




iPhone App Crash的类型以及解决崩溃办法
Crash原因
Crash原因有共性，归纳起来有：
    内存管理错误
    程序逻辑错误
    SDK错误 （部署版本< 编译版本）
    主线程阻塞
    内存管理错误
        内存管理是iPhone开发所要掌握的最基本问题，特别是使用引用计数手动管理内存的情况。内存管理错误包括：
            内存泄漏：未释放不会再使用对象。比如alloc忘记release,malloc忘记free。可用XcodeProduct菜单下的Analyze功能来解决该问题；
            引用出错：引用已经被释放的对象指针。很多“莫名其妙”的Crash都是由于窗体经历的生命周期所导致的（viewDidUnload、viewDidLoad），在iOSSimulator里模拟内存警告就可以解决该问题；
            内存警告：App使用的内存超出设备的限制，iOS将强制挂起App，强制挂起iOS是不会记录Crashlog，Flurry也无法记录。
                    内存泄漏、快速/大量的分配内存都可能导致内存警告，这时候应该尽可能的释放不需要的资源。
                    通过Instruments->Allocations里的Heapshot功能能够找出哪些资源未被释放。

            程序逻辑错误
                    数组越界、堆栈溢出、并发操作、逻辑错误。扎实的编码基础、严谨细致的工作习惯、清晰的思路可以避免这类错误；
            sDK错误
                这个错误出现的现象是有的设备运行正常，有的会Crash。原因是未找到框架、类、方法、属性。比如：用iOS5.0 SDK编译并运行在
                iOS4.0的设备上，5.0的Twitter框架在4.0的设备上找不到。这种问题常出现在用苹果新发布的Xcode编译原有的工程。
            未找到框架的解决办法是：部署版本>= 编译版本。iOS框架向后兼容做的很棒，部署版本> 编译版本一般不会出现问题。
            未找到类、方法、属性的解决办法是：先判断是否存在再使用
            if(NSClassFromString(@"MFMailComposeViewController"))
            respondsToSelector:
            主线程阻塞
                主线程阻塞超过10s，iOS将强制挂起App。把长时间的任务放到后台线程去执行，
                可使用NSThread,NSOperation, dispatch。WWDC2012的Session235 - iOS App Performance_ Responsiveness有详细的介绍。


android有四大组件：Activity、Service、Broadcast Receiver、Content Provider

ANDROID 与 IOS 的区别：
    1. 手机操作系统
        android 较多， ios 较少且不能降级，只能单向升级

    2. 多分辨率测试
        android 端有20多种，而ios较少

    3. 按键： android 一般有3个按键，而ios只有一个home键
        3.1 android 长按home呼出应用列表和切换应用，然后右滑终止应用
     Back键在大部分情况下和页面上的返回键功能一样，不过还要看Back键是否被重写，测试Back键的反馈是否正确，可以在应用间切换，还可以返回主屏幕
        3.2 Ios单击home键返回主界面，双击回到单手操作模式

    4. push测试（推送测试）
        Android：点击home键，程序后台运行时，此时接收到push，点击后唤醒应用，查看此时是否可以正常跳转
        Ios：点击home键关闭程序；屏幕锁屏时的情况（红点的显示）

    5. 安装和卸载测试
        Android的下载、安装的平台和工具，平台比较多
        Ios主要有App store，iTunes，testflight下载

    6. 升级测试
    可以被升级的必要条件：新旧版本具有相同的签名、具有相同的包名、有一个标识符区分新旧版本（如版本号）

    7. 分享跳转
    分享后的文案是否正确、分享后跳转是否正确、显示的消息来源是否正确

    8. 触屏测试
    同时触摸不同的位置或同时进行不同的操作，查看客户端的处理情况，比如，是否会crash等


"""